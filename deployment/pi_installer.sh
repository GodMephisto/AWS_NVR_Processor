#!/bin/bash
# Raspberry Pi NVR System Installer
# Automated setup script for Raspberry Pi

set -e  # Exit on any error

echo "🚀 NVR System Installer for Raspberry Pi"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Check if running on Raspberry Pi
check_raspberry_pi() {
    log "Checking if running on Raspberry Pi..."
    
    if [[ ! -f /proc/device-tree/model ]] || ! grep -q "Raspberry Pi" /proc/device-tree/model; then
        error "This script must be run on a Raspberry Pi"
    fi
    
    PI_MODEL=$(cat /proc/device-tree/model)
    log "Detected: $PI_MODEL"
    
    # Check for Pi 4 (recommended)
    if grep -q "Raspberry Pi 4" /proc/device-tree/model; then
        log "✅ Raspberry Pi 4 detected - Perfect for NVR system!"
    else
        warn "⚠️  Older Raspberry Pi detected. Pi 4 recommended for best performance."
    fi
}

# Update system
update_system() {
    log "Updating system packages..."
    
    sudo apt update
    sudo apt upgrade -y
    
    log "✅ System updated"
}

# Install dependencies
install_dependencies() {
    log "Installing system dependencies..."
    
    # Essential packages
    sudo apt install -y \
        python3 \
        python3-pip \
        python3-venv \
        python3-dev \
        git \
        curl \
        wget \
        htop \
        nano \
        ffmpeg \
        libopencv-dev \
        python3-opencv \
        cifs-utils \
        smbclient \
        build-essential \
        cmake \
        pkg-config \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libv4l-dev \
        libxvidcore-dev \
        libx264-dev \
        libgtk-3-dev \
        libatlas-base-dev \
        gfortran
    
    log "✅ System dependencies installed"
}

# Create NVR user and directories
setup_user() {
    log "Setting up NVR user and directories..."
    
    # Create nvr user if it doesn't exist
    if ! id "nvr" &>/dev/null; then
        sudo useradd -m -s /bin/bash nvr
        log "Created nvr user"
    else
        log "NVR user already exists"
    fi
    
    # Create directories
    sudo mkdir -p /opt/nvr-system
    sudo mkdir -p /var/log/nvr-system
    sudo mkdir -p /etc/nvr-system
    
    # Set permissions
    sudo chown -R nvr:nvr /opt/nvr-system
    sudo chown -R nvr:nvr /var/log/nvr-system
    
    log "✅ User and directories configured"
}

# Install NVR system
install_nvr_system() {
    log "Installing NVR system..."
    
    # Switch to nvr user directory
    cd /opt/nvr-system
    
    # Copy files from current directory (assuming script is run from project root)
    if [[ -f "src/nvr_vod_server.py" ]]; then
        sudo cp -r . /opt/nvr-system/
        sudo chown -R nvr:nvr /opt/nvr-system
        log "Copied NVR system files"
    else
        error "NVR system files not found. Run this script from the project root directory."
    fi
    
    # Create Python virtual environment
    sudo -u nvr python3 -m venv /opt/nvr-system/venv
    
    # Install Python dependencies
    sudo -u nvr /opt/nvr-system/venv/bin/pip install --upgrade pip
    sudo -u nvr /opt/nvr-system/venv/bin/pip install \
        flask \
        flask-cors \
        boto3 \
        opencv-python \
        requests \
        python-dotenv \
        Pillow \
        numpy
    
    # Make scripts executable
    sudo chmod +x /opt/nvr-system/src/*.py
    sudo chmod +x /opt/nvr-system/tools/*.py
    
    log "✅ NVR system installed"
}

# Configure environment
configure_environment() {
    log "Configuring environment..."
    
    # Create environment file template
    cat > /tmp/nvr.env << EOF
# NVR System Configuration
# Generated by installer on $(date)

# NVR Connection
NVR_HOST=192.168.1.100
NVR_STORAGE_PATH=//192.168.1.100/VideoStorage
NVR_USERNAME=admin
NVR_PASSWORD=your_nvr_password

# Camera Configuration (update with your camera IPs)
CAMERA_amcrest_001_IP=192.168.1.101
CAMERA_amcrest_001_RTSP=rtsp://admin:password@192.168.1.101:554/cam/realmonitor?channel=1&subtype=0
CAMERA_amcrest_001_SITE_ID=home
CAMERA_amcrest_001_ENABLED=true

CAMERA_amcrest_002_IP=192.168.1.102
CAMERA_amcrest_002_RTSP=rtsp://admin:password@192.168.1.102:554/cam/realmonitor?channel=1&subtype=0
CAMERA_amcrest_002_SITE_ID=home
CAMERA_amcrest_002_ENABLED=true

# AWS Configuration (update with your credentials)
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-nvr-bucket
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key

# System Configuration
LOG_LEVEL=INFO
VOD_SERVER_HOST=0.0.0.0
VOD_SERVER_PORT=8080
EOF

    sudo mv /tmp/nvr.env /etc/nvr-system/.env
    sudo chown nvr:nvr /etc/nvr-system/.env
    sudo chmod 600 /etc/nvr-system/.env
    
    log "✅ Environment configured"
    warn "⚠️  Please edit /etc/nvr-system/.env with your actual settings"
}

# Create systemd service
create_service() {
    log "Creating systemd service..."
    
    cat > /tmp/nvr-system.service << EOF
[Unit]
Description=NVR Video Processing System
After=network.target
Wants=network.target

[Service]
Type=simple
User=nvr
Group=nvr
WorkingDirectory=/opt/nvr-system
Environment=PATH=/opt/nvr-system/venv/bin
EnvironmentFile=/etc/nvr-system/.env
ExecStart=/opt/nvr-system/venv/bin/python src/nvr_system_manager.py --start-all --nvr-path "\${NVR_STORAGE_PATH}"
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=nvr-system

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/nvr-system /var/log/nvr-system /tmp

[Install]
WantedBy=multi-user.target
EOF

    sudo mv /tmp/nvr-system.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable nvr-system.service
    
    log "✅ Systemd service created and enabled"
}

# Optimize system for video processing
optimize_system() {
    log "Optimizing system for video processing..."
    
    # GPU memory split
    if ! grep -q "gpu_mem" /boot/config.txt; then
        echo "gpu_mem=128" | sudo tee -a /boot/config.txt
    fi
    
    # Enable camera interface (if needed)
    if ! grep -q "start_x=1" /boot/config.txt; then
        echo "start_x=1" | sudo tee -a /boot/config.txt
    fi
    
    # Network optimizations
    cat >> /tmp/sysctl.conf << EOF

# NVR System Network Optimizations
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.ipv4.tcp_rmem = 4096 262144 16777216
net.ipv4.tcp_wmem = 4096 262144 16777216
EOF

    sudo tee -a /etc/sysctl.conf < /tmp/sysctl.conf
    
    # Create log rotation
    cat > /tmp/nvr-system << EOF
/var/log/nvr-system/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 nvr nvr
}
EOF

    sudo mv /tmp/nvr-system /etc/logrotate.d/
    
    log "✅ System optimized"
}

# Create maintenance scripts
create_maintenance_scripts() {
    log "Creating maintenance scripts..."
    
    # Status check script
    cat > /tmp/nvr-status.sh << 'EOF'
#!/bin/bash
# NVR System Status Check

echo "🔍 NVR System Status - $(date)"
echo "================================"

# Service status
echo "🚀 Service Status:"
systemctl status nvr-system.service --no-pager -l

echo ""
echo "💾 Disk Usage:"
df -h

echo ""
echo "🧠 Memory Usage:"
free -h

echo ""
echo "🌡️  CPU Temperature:"
vcgencmd measure_temp

echo ""
echo "🌐 Network Connections:"
netstat -tulpn | grep :8080

echo ""
echo "📋 Recent Logs (last 10 lines):"
journalctl -u nvr-system.service -n 10 --no-pager
EOF

    sudo mv /tmp/nvr-status.sh /usr/local/bin/nvr-status
    sudo chmod +x /usr/local/bin/nvr-status
    
    # Update script
    cat > /tmp/nvr-update.sh << 'EOF'
#!/bin/bash
# NVR System Update Script

echo "📦 Updating NVR System - $(date)"
echo "================================"

# Stop service
sudo systemctl stop nvr-system.service

# Update system packages
sudo apt update && sudo apt upgrade -y

# Update Python packages
/opt/nvr-system/venv/bin/pip install --upgrade pip
/opt/nvr-system/venv/bin/pip install --upgrade flask boto3 opencv-python requests python-dotenv

# Restart service
sudo systemctl start nvr-system.service

echo "✅ Update complete"
EOF

    sudo mv /tmp/nvr-update.sh /usr/local/bin/nvr-update
    sudo chmod +x /usr/local/bin/nvr-update
    
    log "✅ Maintenance scripts created"
}

# Test installation
test_installation() {
    log "Testing installation..."
    
    # Test Python environment
    if /opt/nvr-system/venv/bin/python -c "import flask, boto3, cv2; print('✅ Python dependencies OK')"; then
        log "Python environment test passed"
    else
        error "Python environment test failed"
    fi
    
    # Test NVR connection script
    if /opt/nvr-system/venv/bin/python /opt/nvr-system/tools/nvr_connection_tester.py --help > /dev/null; then
        log "NVR connection tester OK"
    else
        error "NVR connection tester failed"
    fi
    
    log "✅ Installation tests passed"
}

# Main installation function
main() {
    log "Starting NVR System installation on Raspberry Pi"
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        error "This script should not be run as root. Run as regular user with sudo access."
    fi
    
    # Check sudo access
    if ! sudo -n true 2>/dev/null; then
        error "This script requires sudo access. Please run: sudo visudo and add your user."
    fi
    
    # Installation steps
    check_raspberry_pi
    update_system
    install_dependencies
    setup_user
    install_nvr_system
    configure_environment
    create_service
    optimize_system
    create_maintenance_scripts
    test_installation
    
    echo ""
    echo "🎉 NVR System Installation Complete!"
    echo "===================================="
    echo ""
    echo "📋 Next Steps:"
    echo "1. Edit configuration: sudo nano /etc/nvr-system/.env"
    echo "2. Update NVR and camera IP addresses"
    echo "3. Add your AWS credentials"
    echo "4. Test NVR discovery: sudo -u nvr /opt/nvr-system/venv/bin/python /opt/nvr-system/tools/nvr_connection_tester.py --auto-discover"
    echo "5. Start the service: sudo systemctl start nvr-system.service"
    echo "6. Check status: nvr-status"
    echo ""
    echo "🌐 Access VOD API at: http://$(hostname -I | awk '{print $1}'):8080"
    echo ""
    echo "🔧 Useful commands:"
    echo "   nvr-status     - Check system status"
    echo "   nvr-update     - Update system"
    echo "   sudo systemctl restart nvr-system.service - Restart service"
    echo "   sudo journalctl -u nvr-system.service -f  - View live logs"
    echo ""
    echo "⚠️  Reboot recommended to apply all optimizations: sudo reboot"
}

# Run main function
main "$@"