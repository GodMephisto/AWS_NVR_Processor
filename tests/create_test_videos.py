#!/usr/bin/env python3
"""
Create Test Videos for VOD Testing
Generates sample video files with Amcrest naming convention for testing
"""

import os
import sys
import json
from datetime import datetime, timedelta
from pathlib import Path

# Add parent directory to path for imports
sys.path.append(str(Path(__file__).parent.parent))

def create_test_video_file(filepath, duration_seconds=30):
    """Create a dummy video file for testing"""
    # Create directory if it doesn't exist
    filepath.parent.mkdir(parents=True, exist_ok=True)
    
    # Create a dummy file with some content
    # In real scenario, this would be actual video data
    dummy_content = b"DUMMY_VIDEO_DATA" * 1000  # ~15KB file
    
    with open(filepath, 'wb') as f:
        f.write(dummy_content)
    
    print(f"Created test video: {filepath}")

def create_amcrest_test_videos(base_path="test_videos"):
    """Create test videos with Amcrest naming convention"""
    base_path = Path(base_path)
    
    # Create test videos for the last 3 days
    cameras = ["amcrest_001", "amcrest_002"]
    site_id = "test_site"
    
    test_files = []
    
    for days_ago in range(3):
        test_date = datetime.now() - timedelta(days=days_ago)
        date_str = test_date.strftime("%Y%m%d")
        
        for camera_id in cameras:
            # Create directory structure: site/camera/date/
            video_dir = base_path / site_id / camera_id / date_str
            
            # Create 3 video files per camera per day
            for hour in [8, 14, 20]:  # Morning, afternoon, evening
                timestamp = test_date.replace(hour=hour, minute=0, second=0)
                time_str = timestamp.strftime("%H%M%S")
                
                # Amcrest filename format: [timestamp]_[camera]_[sequence].dav
                filename = f"{timestamp.strftime('%Y%m%d_%H%M%S')}_{camera_id}_001.dav"
                filepath = video_dir / filename
                
                create_test_video_file(filepath)
                
                # Store file info for metadata
                test_files.append({
                    'filepath': str(filepath),
                    'camera_id': camera_id,
                    'site_id': site_id,
                    'timestamp': timestamp.isoformat(),
                    'filename': filename
                })
    
    # Create metadata file
    metadata_file = base_path / "test_metadata.json"
    with open(metadata_file, 'w') as f:
        json.dump(test_files, f, indent=2)
    
    print(f"\n‚úÖ Created {len(test_files)} test video files")
    print(f"üìÅ Base directory: {base_path.absolute()}")
    print(f"üìã Metadata saved to: {metadata_file}")
    
    return test_files

def create_test_config(test_files, config_path=".env.test"):
    """Create test configuration file"""
    config_content = f"""# Test Configuration for VOD System
# Generated by create_test_videos.py

# AWS Configuration (use your actual values)
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-nvr-bucket
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key

# Test video source
TEST_VIDEO_PATH={Path('test_videos').absolute()}

# Camera configuration
CAMERA_amcrest_001_SITE_ID=test_site
CAMERA_amcrest_001_ENABLED=true
CAMERA_amcrest_001_RECORDING_ENABLED=true

CAMERA_amcrest_002_SITE_ID=test_site
CAMERA_amcrest_002_ENABLED=true
CAMERA_amcrest_002_RECORDING_ENABLED=true
"""
    
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    print(f"üìù Test config created: {config_path}")
    print("   Update AWS credentials before testing!")

def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Create test videos for VOD testing')
    parser.add_argument('--path', default='test_videos', 
                       help='Base path for test videos (default: test_videos)')
    parser.add_argument('--count', type=int, default=3,
                       help='Number of days of test data (default: 3)')
    
    args = parser.parse_args()
    
    print("üé¨ Creating Test Videos for VOD System")
    print("=" * 40)
    
    # Create test videos
    test_files = create_amcrest_test_videos(args.path)
    
    # Create test config
    create_test_config(test_files)
    
    print("\nüöÄ Next Steps:")
    print("1. Update .env.test with your AWS credentials")
    print("2. Upload test videos: python nvr-system/services/cloud_sync.py --source test_videos")
    print("3. Start VOD API: python src/nvr_vod_server.py")
    print("4. Run tests: python tests/test_vod_streaming.py")

if __name__ == '__main__':
    main()